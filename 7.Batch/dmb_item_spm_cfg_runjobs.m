function dmb_item_spm_cfg_runjobs = dmb_item_spm_cfg_runjobs

% ---------------------------------------------------------------------
% jobs Job File(s)
% ---------------------------------------------------------------------
jobs         = cfg_files;
jobs.tag     = 'jobs';
jobs.name    = 'Job File(s)';
jobs.help    = {'Select the job template(s). If multiple files are selected, they will be concatenated in selection order to form one job.'};
jobs.filter = 'batch';
jobs.ufilter = '.*';
jobs.num     = [1 Inf];
% ---------------------------------------------------------------------
% instr String
% ---------------------------------------------------------------------
instr         = cfg_entry;
instr.tag     = 'instr';
instr.name    = 'String';
instr.help    = {'Enter a string.'};
instr.strtype = 's';
instr.num     = [0  Inf];
% ---------------------------------------------------------------------
% ineval Evaluated Input
% ---------------------------------------------------------------------
ineval         = cfg_entry;
ineval.tag     = 'ineval';
ineval.name    = 'Evaluated Input';
ineval.help    = {'Enter an evaluated input.'};
ineval.strtype = 'e';
ineval.num     = [];
% ---------------------------------------------------------------------
% innifti NIfTI Images
% ---------------------------------------------------------------------
innifti         = cfg_files;
innifti.tag     = 'innifti';
innifti.name    = 'NIfTI Images';
innifti.help    = {'Select NIfTI Images'};
innifti.filter = 'image';
innifti.ufilter = '.*';
innifti.num     = [0 Inf];
% ---------------------------------------------------------------------
% inmat MATLAB .mat Files
% ---------------------------------------------------------------------
inmat         = cfg_files;
inmat.tag     = 'inmat';
inmat.name    = 'MATLAB .mat Files';
inmat.help    = {'Select MATLAB .mat files.'};
inmat.filter = 'mat';
inmat.ufilter = '.*';
inmat.num     = [0 Inf];
% ---------------------------------------------------------------------
% inany Any Files
% ---------------------------------------------------------------------
inany         = cfg_files;
inany.tag     = 'inany';
inany.name    = 'Any Files';
inany.help    = {'Select any kind of files.'};
inany.filter = 'any';
inany.ufilter = '.*';
inany.num     = [0 Inf];
% ---------------------------------------------------------------------
% indir Directory
% ---------------------------------------------------------------------
indir         = cfg_files;
indir.tag     = 'indir';
indir.name    = 'Directory';
indir.help    = {'Directory'};
indir.filter = 'dir';
indir.ufilter = '.*';
indir.num     = [1 Inf];
% ---------------------------------------------------------------------
% inputs Job Inputs
% ---------------------------------------------------------------------
inputs         = cfg_repeat;
inputs.tag     = 'inputs';
inputs.name    = 'Job Inputs';
inputs.help    = {'Assemble the set of input items for one run of the job.'};
inputs.values  = {instr ineval innifti inmat inany indir };
inputs.num     = [0 Inf];
% ---------------------------------------------------------------------
% runs Runs
% ---------------------------------------------------------------------
runs         = cfg_repeat;
runs.tag     = 'runs';
runs.name    = 'Runs';
runs.help    = {'Repeat "Job Inputs" for each run of the job, even if you want to specify no inputs in this batch itself. The number of "Job Inputs" items determines how often this job is run.'};
runs.values  = {inputs };
runs.num     = [1 Inf];
% ---------------------------------------------------------------------
% outstub Batch Filename Stub
% ---------------------------------------------------------------------
outstub         = cfg_entry;
outstub.tag     = 'outstub';
outstub.name    = 'Batch Filename Stub';
outstub.help    = {'The output filename will be generated by appending a job counter to this string.'};
outstub.strtype = 's';
outstub.num     = [1  Inf];
% ---------------------------------------------------------------------
% outdir Batch Directory
% ---------------------------------------------------------------------
outdir         = cfg_files;
outdir.tag     = 'outdir';
outdir.name    = 'Batch Directory';
outdir.help    = {'The generated batches will be saved into this folder.'};
outdir.filter = 'dir';
outdir.ufilter = '.*';
outdir.num     = [1 1];
% ---------------------------------------------------------------------
% savejobs Save
% ---------------------------------------------------------------------
savejobs         = cfg_branch;
savejobs.tag     = 'savejobs';
savejobs.name    = 'Save';
savejobs.val     = {outstub outdir };
savejobs.help    = {'Specify filename stub and output directory to save the generated files.'};
% ---------------------------------------------------------------------
% dontsave Don't Save
% ---------------------------------------------------------------------
dontsave         = cfg_const;
dontsave.tag     = 'dontsave';
dontsave.name    = 'Don''t Save';
dontsave.val = {false};
dontsave.help    = {'Do not save the generated jobs.'};
% ---------------------------------------------------------------------
% save Save Generated Batch Jobs
% ---------------------------------------------------------------------
save         = cfg_choice;
save.tag     = 'save';
save.name    = 'Save Generated Batch Jobs';
save.help    = {'The generated batch jobs can be saved for reference or debugging purposes.'};
save.values  = {savejobs dontsave };
% ---------------------------------------------------------------------
% missing Missing Inputs
% ---------------------------------------------------------------------
missing         = cfg_menu;
missing.tag     = 'missing';
missing.name    = 'Missing Inputs';
missing.help    = {'Jobs with missing inputs (e.g. because of wrong input contents) can be skipped, while filled jobs are run. Alternatively, if any job has missing inputs, no jobs are run.'};
missing.labels = {
                  'Skip jobs with missing inputs, run filled jobs'
                  'Don''t run any jobs if missing inputs'
                  }';
missing.values = {
                  'skip'
                  'error'
                  }';
              
% ---------------------------------------------------------------------
% memory integer
% ---------------------------------------------------------------------
mem         = cfg_entry;
mem.tag     = 'mem';
mem.name    = 'Memory requirement per job';
mem.help    = {'Enter the expected memory required per job in bytes. For example, 4*1024000 is about 4 MB. If left empty, the first job will be run locally to estimate the memory requirement (using memtic-memtoc). Double this amount will then be used for each other job. '};
mem.strtype = 'n';
mem.num     = [0 inf];

% ---------------------------------------------------------------------
% memory integer
% ---------------------------------------------------------------------
time         = cfg_entry;
time.tag     = 'time';
time.name    = 'Time requirement per job';
time.help    = {'Enter the expected time required per job in seconds. For example, 300 is five minutes. If left empty, the first job will be run locally to estimate the time requirement (using tic-toc). Double this amount will then be used for each other job. Note: jobs beneath one minute duration will be ran locally by default.'};
time.strtype = 'n';
time.num     = [0 inf];

% ---------------------------------------------------------------------
% runjobs Run Batch Jobs
% ---------------------------------------------------------------------
dmb_item_spm_cfg_runjobs         = cfg_exbranch;
dmb_item_spm_cfg_runjobs.tag     = 'runjobs';
dmb_item_spm_cfg_runjobs.name    = 'Run Batch Jobs';
dmb_item_spm_cfg_runjobs.val     = {jobs runs save missing mem time};
dmb_item_spm_cfg_runjobs.help    = {'Load a set of job files, fill missing inputs and run the filled job. This automates the creation and execution of batch jobs for a large number of identical computations.'};
dmb_item_spm_cfg_runjobs.prog    = @dmb_run_spm_cfg_run_runjobs;
dmb_item_spm_cfg_runjobs.vout    = @cfg_vout_runjobs;